diff '--color=auto' -uNr patch/celebi.h materialyoucolor/quantize/celebi.h
--- patch/celebi.h	2024-01-13 11:47:16.477314056 +0530
+++ materialyoucolor/quantize/celebi.h	2023-12-29 11:08:43.363374804 +0530
@@ -22,8 +22,8 @@
 
 #include <vector>
 
-#include "cpp/quantize/wsmeans.h"
-#include "cpp/utils/utils.h"
+#include "wsmeans.h"
+#include "utils.h"
 
 namespace material_color_utilities {
 
diff '--color=auto' -uNr patch/lab.cc materialyoucolor/quantize/lab.cc
--- patch/lab.cc	2024-01-13 11:47:16.030646286 +0530
+++ materialyoucolor/quantize/lab.cc	2023-12-29 11:08:43.363374804 +0530
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-#include "cpp/quantize/lab.h"
+#include "lab.h"
 
 #include <math.h>
 
-#include "cpp/utils/utils.h"
+#include "utils.h"
 
 namespace material_color_utilities {
 
diff '--color=auto' -uNr patch/lab.h materialyoucolor/quantize/lab.h
--- patch/lab.h	2024-01-13 11:47:15.627311957 +0530
+++ materialyoucolor/quantize/lab.h	2023-12-29 11:08:43.363374804 +0530
@@ -28,7 +28,7 @@
 #include <unordered_set>
 #include <vector>
 
-#include "cpp/utils/utils.h"
+#include "utils.h"
 
 namespace material_color_utilities {
 
diff '--color=auto' -uNr patch/utils.cc materialyoucolor/quantize/utils.cc
--- patch/utils.cc	2024-01-13 11:47:17.760650558 +0530
+++ materialyoucolor/quantize/utils.cc	2024-01-13 12:49:58.022437349 +0530
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-#include "cpp/utils/utils.h"
+#include "utils.h"
 
 #include <math.h>
 
@@ -23,8 +23,8 @@
 #include <cstdint>
 #include <cstdio>
 #include <string>
-
-#include "absl/strings/str_cat.h"
+#include <iomanip>
+#include <sstream>
 
 namespace material_color_utilities {
 
@@ -140,7 +140,7 @@
 // Converts a color in ARGB format to a hexadecimal string in lowercase.
 //
 // For instance: hex_from_argb(0xff012345) == "ff012345"
-std::string HexFromArgb(Argb argb) { return absl::StrCat(absl::Hex(argb)); }
+std::string hex_from_argb(int color) { return std::stringstream() << std::hex << std::setw(8) << std::setfill('0') << color, std::stringstream().str().substr(2); }
 
 Argb IntFromLstar(const double lstar) {
   double y = YFromLstar(lstar);
@@ -172,6 +172,8 @@
       input.a * matrix[1][0] + input.b * matrix[1][1] + input.c * matrix[1][2];
   double c =
       input.a * matrix[2][0] + input.b * matrix[2][1] + input.c * matrix[2][2];
-  return (Vec3){a, b, c};
+  // Fix build on windows
+  Vec3 __ = {a, b, c}; 
+  return __;
 }
 }  // namespace material_color_utilities
diff '--color=auto' -uNr patch/wsmeans.cc materialyoucolor/quantize/wsmeans.cc
--- patch/wsmeans.cc	2024-01-13 11:47:15.197310895 +0530
+++ materialyoucolor/quantize/wsmeans.cc	2024-01-09 17:35:33.361759926 +0530
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-#include "cpp/quantize/wsmeans.h"
+#include "wsmeans.h"
 
 #include <algorithm>
 #include <cmath>
@@ -27,8 +27,8 @@
 #include <unordered_set>
 #include <vector>
 
-#include "absl/container/flat_hash_map.h"
-#include "cpp/quantize/lab.h"
+// #include "absl/container/flat_hash_map.h"
+#include "lab.h"
 
 constexpr int kMaxIterations = 100;
 constexpr double kMinDeltaE = 3.0;
@@ -64,7 +64,8 @@
   }
 
   uint32_t pixel_count = input_pixels.size();
-  absl::flat_hash_map<Argb, int> pixel_to_count;
+  // absl::flat_hash_map<Argb, int> pixel_to_count;
+  std::unordered_map<Argb, int> pixel_to_count;
   std::vector<uint32_t> pixels;
   pixels.reserve(pixel_count);
   std::vector<Lab> points;
@@ -75,7 +76,8 @@
     // std::unordered_map 10.2 ms
     // absl::btree_map 9.0 ms
     // absl::flat_hash_map 8.0 ms
-    absl::flat_hash_map<Argb, int>::iterator it = pixel_to_count.find(pixel);
+    // absl::flat_hash_map<Argb, int>::iterator it = pixel_to_count.find(pixel);
+    std::unordered_map<Argb, int>::iterator it = pixel_to_count.find(pixel);
     if (it != pixel_to_count.end()) {
       it->second++;
 
diff '--color=auto' -uNr patch/wsmeans.h materialyoucolor/quantize/wsmeans.h
--- patch/wsmeans.h	2024-01-13 11:47:14.800643248 +0530
+++ materialyoucolor/quantize/wsmeans.h	2023-12-29 11:08:43.370041494 +0530
@@ -21,7 +21,7 @@
 #include <map>
 #include <vector>
 
-#include "cpp/utils/utils.h"
+#include "utils.h"
 
 namespace material_color_utilities {
 
diff '--color=auto' -uNr patch/wu.cc materialyoucolor/quantize/wu.cc
--- patch/wu.cc	2024-01-13 11:47:14.367308844 +0530
+++ materialyoucolor/quantize/wu.cc	2023-12-29 11:08:43.370041494 +0530
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-#include "cpp/quantize/wu.h"
+#include "wu.h"
 
 #include <stdlib.h>
 
@@ -23,7 +23,7 @@
 #include <cstdio>
 #include <vector>
 
-#include "cpp/utils/utils.h"
+#include "utils.h"
 
 namespace material_color_utilities {
 
diff '--color=auto' -uNr patch/wu.h materialyoucolor/quantize/wu.h
--- patch/wu.h	2024-01-13 11:47:13.933974439 +0530
+++ materialyoucolor/quantize/wu.h	2023-12-29 11:08:43.370041494 +0530
@@ -21,7 +21,7 @@
 
 #include <vector>
 
-#include "cpp/utils/utils.h"
+#include "utils.h"
 
 namespace material_color_utilities {
 
--- patch/celebi.cc	2024-03-25 23:22:50.123427023 +0530
+++ materialyoucolor/quantize/celebi.cc	2024-03-25 23:20:03.277959473 +0530
@@ -14,47 +14,78 @@
  * limitations under the License.
  */
 
-#include "cpp/quantize/celebi.h"
+#include "celebi.h"
 
 #include <cstddef>
+#include <cstdint>
 #include <cstdio>
 #include <cstdlib>
+#include <iostream>
 #include <vector>
 
-#include "cpp/quantize/wsmeans.h"
-#include "cpp/quantize/wu.h"
-#include "cpp/utils/utils.h"
-
-namespace material_color_utilities {
-
-QuantizerResult QuantizeCelebi(const std::vector<Argb>& pixels,
-                               uint16_t max_colors) {
-  if (max_colors == 0 || pixels.empty()) {
-    return QuantizerResult();
-  }
-
+#include "wsmeans.h"
+#include "wu.h"
+#include "utils.h"
+#include "pybind11/pybind11.h"
+#include "pybind11/stl.h"
+#define STB_IMAGE_IMPLEMENTATION
+#include "stb_image.h"
+
+namespace python = pybind11;
+
+// std::map<Argb, uint32_t>
+std::map<uint32_t, uint32_t> QuantizeCelebi(const std::vector<std::vector<int>>& pixels,
+                               int max_colors) {
   if (max_colors > 256) {
     max_colors = 256;
   }
-
   int pixel_count = pixels.size();
 
-  std::vector<Argb> opaque_pixels;
+  std::vector<material_color_utilities::Argb> opaque_pixels;
   opaque_pixels.reserve(pixel_count);
   for (int i = 0; i < pixel_count; i++) {
-    int pixel = pixels[i];
-    if (!IsOpaque(pixel)) {
-      continue;
-    }
+    uint32_t pixel = (pixels[i][0] << 16) | 
+                     (pixels[i][1] << 8) | 
+                     (pixels[i][2]);
+    //if (pixels[i].size() > 3 && pixels[i][3] == 255) 
     opaque_pixels.push_back(pixel);
   }
 
-  std::vector<Argb> wu_result = QuantizeWu(opaque_pixels, max_colors);
+  std::vector<material_color_utilities::Argb> wu_result = material_color_utilities::QuantizeWu(
+      opaque_pixels, max_colors);
 
-  QuantizerResult result =
-      QuantizeWsmeans(opaque_pixels, wu_result, max_colors);
+  material_color_utilities::QuantizerResult result =
+      material_color_utilities::QuantizeWsmeans(opaque_pixels, wu_result, max_colors);
+  
+  return result.color_to_count;
+}
+ 
 
-  return result;
+std::vector<std::vector<int>> StbLoadImage(const char* image_path) {
+    int width, height, channels;
+    std::vector<std::vector<int>> pixel_array = {};
+    // Load the actual image
+    unsigned char* pixel_result = stbi_load(image_path, &width, &height, &channels, 4);
+    if (!pixel_result) {return pixel_array;}
+
+    pixel_array.reserve(width * height);
+    unsigned char* pixel_position;
+    
+    for (int y = 0; y < height; ++y) {
+        for (int x = 0; x < width; ++x) {
+            pixel_position = pixel_result + (x + y * width) * 4;
+            std::vector<int> current_color = {
+              pixel_position[0], pixel_position[1], pixel_position[2]};
+            if (channels > 3) {current_color.push_back(pixel_position[3]);}  
+            pixel_array.push_back(current_color);
+        }
+    }
+    stbi_image_free(pixel_result);
+    return pixel_array;
 }
 
-}  // namespace material_color_utilities
+PYBIND11_MODULE(celebi, m) {
+    m.doc() = "Functions from cpp backend";
+    m.def("QuantizeCelebi", &QuantizeCelebi, "Get dominant colors");
+    m.def("StbLoadImage", &StbLoadImage, "Get pixel array");
+}
